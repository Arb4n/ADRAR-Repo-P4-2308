const root = ReactDOM.createRoot(
  document.getElementById('root')
);

function tick() {
  const element = (
    <div>
      <h1>Bonjour, monde !</h1>
      <h2>Il est {new Date().toLocaleTimeString()}.</h2>
    </div>
  );
  root.render(element);}

setInterval(tick, 1000);




JSX repr√©sente des objets

Babel compile JSX vers des appels √† React.createElement().
Ces deux exemples sont identiques :

const element = (
  <h1 className="greeting">
    Bonjour, monde !
  </h1>
);

const element = React.createElement(
  'h1',
  {className: 'greeting'},
  'Bonjour, monde !'
);

React.createElement() effectue quelques v√©rifications pour vous aider √† √©crire un code sans bug, mais pour l‚Äôessentiel il cr√©e un objet qui ressemble √† ceci :

// Remarque : cette structure est simplifi√©e
const element = {
  type: 'h1',
  props: {
    className: 'greeting',
    children: 'Bonjour, monde !'
  }
};







Un premier composant : 
ma fonction MyComponent 


function MyComponent () {
	return (<div>Hello OpenClassrooms</div>)
	}
	
	
En fl√©ch√©e : 	
const MyComponent = () => (<div> Hello </div>)
)




html>>
<div id="root"></div>

JS>>
function Header() {
  return (<h1>La maison jungle</h1>)
}

ReactDOM.render(<Header />, document.getElementById("root"))

OR>> 

const Header = () => <h1> Jungle </h1>;

ReactDOM.render(<Header />, document.getElementById("header"));



const Header = () => <H1> Jungle </h1>
const Header = () => (<h1> Jungle </h1> 


const Header = () () => (</1> h1 jungle </h1>


ReactDOM.render (<Header />, document.getElementById ("header"));


const Header = () => (<h1> Jungle </h1> )

ReactDOM.render (getElementById ("header")

ReactDom.render (getElementById ("header") 


cosnt Header =() => (<h1> jungle </h1>);


function Header () {

	return (<h1> Jungle </h1>)}
	
	ReactDom.render (getElementById ("header"); 
	
	
	
	
	const Reponse = () => return (<div> La r√©ponse √† la vie est {6*8});
	
	function Reponse () {
	return (<div> La r√©ponse √† la vie est {6*8}</div>) 
	}
	
	function Age () {
	
		return (<div> Alexia.toUpperCase() </div>)
		
		}
		
	<div> {2>0 ? 'Deux est plus grand que z√©ro' : ' Rien' } </div>

		const Operation = () => (<div> 5>n ? ' liiiitle' : 'Biiiiiig !!!' </div> );
		
		<div> {
		
		
		{} }{{}{}{}{}{}{}{{}{}{}}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{
		const If = () => (<div> 2*3 ? 'Six' : 'Not six' </div> ) 
		
		
		
		function Description() {
    const text = "Ici achetez toutes les plantes dont vous avez toujours r√™v√©"
    return (<p>{ text }</p>)
}


function Description() { 
	myText = "Lololol";
	return (<p> {myText}</p> ;
	
	
	
	function myDescription () {
	const text ='essai 2 connard '; 
	return (<p> {text}</p>);
	


>> 


Vous trouverez ici le lien CodePen pour commencer l'exercice. Voil√† ce qui est attendu de vous :

    R√©utiliser le composant Banner de ce chapitre qui pr√©sente le nom de notre boutique. Vous devez sortir le titre dans une variable JavaScript : le titre doit initialement √™tre en minuscules et √™tre transform√© en majuscules avec du JavaScript.

    Cr√©er un composant <Cart /> (panier) qui viendra sous notre titre.

    Le panier contient 3 plantes : un monstera, un lierre et un bouquet de fleurs.

    Cr√©er 3 variables pour les prix des plantes : le monstera co√ªte 8, le lierre co√ªte 10, et le bouquet de fleurs co√ªte 15.

    Le panier contient une liste (<ul> üòâ), et chaque √©l√©ment pr√©sente le nom de l'article, et le prix.

    Le total du panier additionne les trois prix.

Et la solution correspondante se trouve ici.	
	
	
	
	function Banner() {
const title = "La maison jungle"
  return (<h1>{title.toUpperCase()}</h1>)
}

function Cart() {
const monsteraPrice = 8
const ivyPrice = 10
const flowerPrice = 15
return (<div>
    <h2>Panier</h2>
    <ul>
    <li>Monstera : {monsteraPrice}‚Ç¨</li>
     <li>Lierre : {ivyPrice}‚Ç¨</li>
     <li>Fleurs : {flowerPrice}‚Ç¨</li>
    </ul>
      Total : {monsteraPrice + ivyPrice + flowerPrice }‚Ç¨
      </div>)
}

ReactDOM.render(<div><Banner /><Cart /></div>, document.getElementById('root'))



function Banner 



const MyComponent = () => (<div>Hello World</div>)

function MyComponent() { return (<div>Hello World</div>)}

class MyComponent extends React.Component {render() {return <div>Hello World</div>}}

class MyComponent extends react.Component {render() {return <div>Hello >World</div>}}

class MyComponent extends react.Component {

render() 





const MyComponent = () => (<h1>Hello</h1>)




const numbers = [1, 3, 6, 0]
const double = numbers.map(n => n*2)

const numbers = [1, 8, 10, 3]
const double = numbers.map(n => n*3)

const quadruple = numbers.map(n=> n*4)



>>>>>>>>


function ShoppingList() {
return ( 
<ul> 
{plantList.map((plant) => (
	<li>{plant}</li>
	))}
	</ul>
	)
}



function shoppingList() {
return ( <ul>
{plantList.mapr((plant)=> (<li>{plant}</li>
))}
</ul>
)
}
function ShoppingList () {
return ( 
<ul> 
{plantList.map((plant)
</ul>



function ShoppingList () {

return (<ul> 
{plantList.map((plant)=> (<li>{plant}</li>
))}
</ul>
)
}

function shoppintList() {

	return ( <ul>
	{ plantList.map((plant) => (<li>{plant}</li>))
	}</ul>
}

function ShoppingList () {
	return (plantList.map((plant) => (<li>{plant}</li>))}
	
	function ShoppintList (){ return (plantList.map((plant) => (<li> {plant}<:li>))
	
	
OR>>
	
const ShoppingList = () => (plantList.map((plant) => (<li>{plant}</li>))

OR

import React from 'react';

const plantList = ['Monstera', 'Snake Plant', 'Fiddle Leaf Fig'];

function renderPlantListItem(plant) {
  return <li key={plant}>{plant}</li>;
}

function ShoppingList() {
  return (
    <ul>
      {plantList.map(renderPlantListItem)}
    </ul>
  );
}

export default ShoppingList;



<<<<<<<<<<<<




consr categories = plantList.reduce(
  const categories = plantList.reduce(
    (acc; plant)=> 
      acc.includes(plant.category) ? acc : acc.concat(plant.category),[]
  )
)

const categories = pklantList.reduce(
  const categories = plantList.reduce(
    (acc, plant) => acc.includes(plant.category) ? acc : acc.concat(plant.category), [])

    const categories = plantList.reduce(
      (acc, plant) => acc.includes(plant.category) ? acc : acc.concat(plant.category),
      []
    )
  )
)
const categories = plantList.reduce (
  (acc, plant) => 
  acc.includes(plant.category) ? acc : acc.concat(plant.category),
  []
)

const categories = plantList.reduce (
  (acc, plant) => acc.includes(plant.category) ? acc : acc.concat(plant.category),
  []
)


const categories = plantList.reduce (
  (acc, plant) => 
)


<div> 

<ul>
{categories.map(cat)=> (
  <li> key={cat}>{cat}</li>
)
)}

</ul>

<ul> className='plantName'>
{plantList.map((plant) =>)}

</div>