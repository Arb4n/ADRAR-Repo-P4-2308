R√©utilisez vos composants avec les props
Familiarisez-vous avec les props

R√©utilisez vos composants avec les props

Vous l'avez compris : la r√©utilisation des composants est au c≈ìur de la logique de React. Mais, pour √™tre r√©utilis√©s, les composants requi√®rent souvent une configuration. Bonne nouvelle : pour √ßa, vous allez pouvoir utiliser les props. üéâ
Familiarisez-vous avec la syntaxe

Et si je vous disais que vous avez d√©j√† utilis√© une prop ? Eh oui, la prop  key   dans le chapitre sur les listes ! Vous avez donc d√©j√† vu la syntaxe.

Revenons √† notre site de plantes. Nous allons maintenant cr√©er un nouveau composant qui va √™tre r√©utilis√©. L'id√©e est de cr√©er une √©chelle d'arrosage et une √©chelle de luminosit√© pour chaque plante.

Rouvrons  ShoppingList.js, o√π nous ajoutons les donn√©es correspondantes dans  plantList  : 

    une donn√©e  water   qui correspond √† l'arrosage conseill√© pour chaque plante ;

    et une donn√©e  light   qui correspond √† l'ensoleillement n√©cessaire.

Commen√ßons par la lumi√®re : dans chaque item plante, on vient ajouter un composant  CareScale   et on lui passe la prop value :

<CareScale scaleValue={plant.light} />

Mais du coup, comment r√©cup√©rer la valeur d'une prop dans notre composant ?

Eh bien, les props sont r√©cup√©r√©es dans les param√®tres de la fonction qui d√©finit notre composant.

Pour  CareScale, on aura donc :

function CareScale(props) {

    const scaleValue = props.scaleValue

    return <div>{scaleValue}‚òÄÔ∏è</div>

}

    

export default CareScale

Mais on avait dit qu'on voulait une √©chelle de 1 √† 3, non ?

On va donc partir sur une liste, qu'on peut cr√©er manuellement.

Ce qui nous donne :

function CareScale(props) {

    const scaleValue = props.scaleValue


    const range = [1, 2, 3]


    return (

        <div>

            {range.map((rangeElem) =>

                scaleValue >= rangeElem ? <span key={rangeElem.toString()}>‚òÄÔ∏è</span> : null

            )}

        </div>

    )

}

F√©licitations ! üî• Vous venez d'utiliser les  props   !

Les props sont donc des objets que l'on peut r√©cup√©rer dans les param√®tres de notre composant fonction.

On va pousser la logique un peu plus loin afin de v√©ritablement param√©trer notre composant.
Cr√©ez des param√®tres

Je vais commencer par pr√©ciser une  prop pour le type que j'appellerai  careType  pour mon composant  CareScale   et r√©utiliser ce composant entre l'ensoleillement et l'arrosage :

<CareScale careType='water' scaleValue={plant.water} />

<CareScale careType='light' scaleValue={plant.light} />

Il faut maintenant que j'adapte  CareScale   pour r√©cup√©rer le  careType.

√Ä partir de maintenant, je vais utiliser une syntaxe qui nous est permise depuis l'ES6 : la d√©structuration. Elle permet directement de d√©clarer une variable et de lui assigner la valeur d'une propri√©t√© d'un objet.
Ici on peut donc faire :

const {scaleValue, careType} = props

// On √©vite de multiplier les d√©clarations qui sans cette syntaxe auraient √©t√© :

// const scaleValue = props.scaleValue et

// const careType = props.careType

Cela nous permet de d√©clarer directement nos deux variables  scaleValue   et  careType  , et de les assigner aux valeurs pass√©es en props. On peut m√™me directement l'√©crire dans les param√®tres :

function CareScale({scaleValue, careType}) {

On peut donc maintenant param√©trer notre composant  CareScale   pour qu'il puisse g√©rer les donn√©es d'arrosage et les donn√©es d'ensoleillement :

function CareScale({ scaleValue, careType }) {

    const range = [1, 2, 3]

    

    const scaleType = careType === 'light' ? '‚òÄÔ∏è' : 'üíß'


    return (

        <div>

            {range.map((rangeElem) => scaleValue >= rangeElem ? <span key={rangeElem.toString()}>{scaleType}</span> : null

            )}

        </div>

    )

}

Comme vous l'avez vu ici, nous avons utilis√© deux syntaxes diff√©rentes pour nos props. Pour  scaleType, nous lui avons assign√© une  string, entre guillemets. En revanche, pour  scaleValue, nous lui avons attribu√© la valeur d'un objet, que nous avons pass√©e entre accolades.

En pratique, une prop peut avoir n‚Äôimporte quelle valeur possible en JavaScript, mais syntaxiquement, en JSX, on n‚Äôa en gros que deux possibilit√©s :

    un litt√©ral  String , mat√©rialis√© par des guillemets ;

    ou, pour tout le reste (bool√©en, number, expression Javascript, etc.), des accolades  {}.

Faites descendre les donn√©es, des parents vers les enfants

Les props nous permettent donc de configurer nos composants. Elles r√©pondent √† la logique m√™me de React selon laquelle les donn√©es descendent √† travers notre arborescence de composants : il s'agit d'un flux de donn√©es unidirectionnel.
Un composant parent fait descendre des donn√©es √† ses composants enfants
Les composants parents partagent leurs donn√©es avec leurs enfants

Je vous ai d√©j√† parl√© dans la premi√®re partie de ce cours de composants parents/composants enfants ?

Comme vous pouviez vous en douter, un composant est le parent du composant d√©fini dans le  return().

Dans notre exemple,  CareScale   est l'enfant, et  ShoppingList   est le parent.

Pour les props, vous devez garder deux r√®gles √† l'esprit :

    Une prop est toujours pass√©e par un composant parent √† son enfant : c‚Äôest le seul moyen normal de transmission.

    Une prop est consid√©r√©e en lecture seule dans le composant qui la re√ßoit.

D√©couvrez la prop technique  children 

Il existe chez React des props qui ont un comportement un peu particulier : nous les appelons les props techniques. üõ†

La syntaxe de cette prop est particuli√®re, puisqu'elle n‚Äôest pas fournie √† l‚Äôaide d‚Äôun attribut, mais en imbriquant des composants √† l‚Äôint√©rieur du composant concern√©.

Ce qui nous donne :

<Parent>

    <Enfant1 />

    <Enfant2 />

</Parent>

Par exemple, si on utilise  children   pour r√©√©crire la Banner, cela nous donnerait dans  App.js  :

<Banner>

    <img src={logo} alt='La maison jungle' />

    <h1 className='lmj-title'>La maison jungle</h1>

</Banner>

Ici,   img  et  h1   sont les n≈ìuds enfants dans le DOM de  Banner.

Et on peut acc√©der √† ces n≈ìuds enfants de Banner dans ses param√®tres, un peu de la m√™me mani√®re qu'on r√©cup√©rerait des props :

function Banner({ children }) {

    return <div className='lmj-banner'>{children}</div>

}

Cette mani√®re d'utiliser  children   est particuli√®rement utile lorsqu'un composant ne conna√Æt pas ses enfants √† l'avance, par exemple pour une barre de navigation (Sidebar) ou bien pour une modale.

Les  props   constituent un aspect cl√© de React. Mais, en les manipulant, vous verrez qu'il peut √™tre tr√®s facile de faire des erreurs. Cela vient notamment de la flexibilit√© de JavaScript, qui fait du typage dynamique (les types  string,  int, etc.). Pour vous donner un exemple d'erreur classique :

    Vous passez une prop value √† un composant. 

    Vous utilisez une liste de valeurs, certaines valeurs sont des strings, d'autres des nombres. 

    Vous appliquez la m√©thode  .toUpperCase()   √† votre  value   : boum ! 

Une erreur !  .toUpperCase()   n'existe pas sur un nombre. üôà

Pour √©viter ce genre d'erreur, je vous conseille d'√™tre extr√™mement rigoureux sur le type de props que vous passez √† vos composants.

Pour cela, React a cr√©√© les PropTypes, qui nous permettent de pr√©ciser d√®s le d√©but le type d'une prop, si elle est requise, et de lui attribuer une valeur par d√©faut. Nous ne les verrons pas dans ce cours, mais vous pouvez y jeter un ≈ìil d√®s maintenant.
Exercez-vous

Banner Exercez-vous

Vous allez pouvoir utiliser vos connaissances pour enrichir notre site de plantes üå±. Le code pour d√©buter l'exercice se trouve sur P2C4-Begin.

Vous allez cr√©er un composant PlantItem qui sera un composant enfant de ShoppingList.

PlantItem prend en props :

    name   pour le nom de la plante ;

    cover   pour l'image correspondante ;

    id   qui correspond √† l'item de chaque √©l√©ment ;

    light ;

    water.

Les props  name   et  cover   seront utilis√©es directement dans PlantItem.

light   et  water, que nous avons d√©j√† cr√©√©es ensemble, seront pass√©es au composant  CareScale   dans  PlantItem.

Vous trouverez dans  styles/PlantItem.css   les classes CSS  lmj-plant-item-cover   et  lmj-plant-item   qui vous aideront √† cr√©er de beaux composants ü§©. Je vous propose √©galement de remplacer nos emojis par les ic√¥nes 'sun' et 'water' que vous trouverez dans  /assets.

La solution se trouve sur la branche P2C4-Solution.
En r√©sum√©

    Les props sont des objets que l'on peut r√©cup√©rer dans les param√®tres de notre composant fonction.

    Il existe deux syntaxes pour assigner une valeur √† une prop :

        les guillemets pour les  string ;

        les accolades pour tout le reste : nombres, expressions JavaScript, bool√©en, etc.

    La d√©structuration est une syntaxe permettant de d√©clarer une variable en l'affectant directement √† la valeur d'un objet (ou tableau).

    Une prop est :

        toujours pass√©e par un composant parent √† son enfant ;

        consid√©r√©e en lecture seule dans le composant qui la re√ßoit.

    La prop  children   est renseign√©e en imbriquant les enfants dans le parent : <Parent><Enfant /></Parent>.

    children   est utile lorsqu'un composant ne conna√Æt pas ses enfants √† l'avance.

Alors, les props n'ont plus de secret pour vous ? üòé
Est-ce que vous vous rendez compte qu'avec tout ce que vous avez appris, notre site de plantes prend de plus en plus forme ? 

Mais vous ne trouvez pas qu'il reste encore un peu trop statique ? Qu'on ne peut pas assez interagir avec lui ? √áa tombe bien, parce que c'est le programme du prochain chapitre ! √Ä tout de suite !